//Copyright (c) 2009 Emil Dotchevski and Reverge Studios, Inc.

//Distributed under the Boost Software License, Version 1.0. (See accompanying
//file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_LA_CUSTOM_MATRIX_INVERSE_2_HPP_INCLUDED
#define BOOST_LA_CUSTOM_MATRIX_INVERSE_2_HPP_INCLUDED

//This file was generated by a program. Do not edit manually.

#include <boost/la/config.hpp>
#include <boost/utility/enable_if.hpp>
#include <boost/la/deduce_matrix.hpp>
#include <boost/la/scalar_traits.hpp>
#include <boost/assert.hpp>

namespace
boost
    {
    namespace
    la
        {
        template <class A>
        BOOST_LA_INLINE_OPERATIONS
        typename lazy_enable_if_c<
            matrix_traits<A>::rows==2 && matrix_traits<A>::cols==2,
            deduce_matrix<A> >::type
        inverse( A const & a, typename matrix_traits<A>::scalar_type det )
            {
            typedef typename matrix_traits<A>::scalar_type T;
            BOOST_ASSERT(det!=scalar_traits<T>::zero());
            T const a00=matrix_traits<A>::template r<0,0>(a);
            T const a01=matrix_traits<A>::template r<0,1>(a);
            T const a10=matrix_traits<A>::template r<1,0>(a);
            T const a11=matrix_traits<A>::template r<1,1>(a);
            T const f=scalar_traits<T>::one()/det;
            typedef typename deduce_matrix<A>::type R;
            R r;
            matrix_traits<R>::template w<0,0>(r)= f*a11;
            matrix_traits<R>::template w<0,1>(r)=-f*a01;
            matrix_traits<R>::template w<1,0>(r)=-f*a10;
            matrix_traits<R>::template w<1,1>(r)= f*a00;
            return r;
            }

        namespace
        la_detail
            {
            template <int D>
            struct matrix_inverse_defined;

            template <>
            struct
            matrix_inverse_defined<2>
                {
                static bool const value=true;
                };
            }
        }
    }

#endif
