//Copyright (c) 2009 Emil Dotchevski and Reverge Studios, Inc.

//Distributed under the Boost Software License, Version 1.0. (See accompanying
//file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_LA_CUSTOM_MATRIX_MUL_EQ_MATRIX_2_HPP_INCLUDED
#define BOOST_LA_CUSTOM_MATRIX_MUL_EQ_MATRIX_2_HPP_INCLUDED

//This file was generated by a program. Do not edit manually.

#include <boost/la/config.hpp>
#include <boost/la/matrix_traits.hpp>
#include <boost/utility/enable_if.hpp>

namespace
boost
    {
    namespace
    la
        {
        template <class A,class B>
        BOOST_LA_INLINE_OPERATIONS
        typename enable_if_c<
            matrix_traits<A>::rows==2 && matrix_traits<B>::rows==2 &&
            matrix_traits<A>::cols==2 && matrix_traits<B>::cols==2,
            A &>::type
        operator*=( A & a, B const & b )
            {
            typedef typename matrix_traits<A>::scalar_type Ta;
            typedef typename matrix_traits<B>::scalar_type Tb;
            Ta const a00 = matrix_traits<A>::template r<0,0>(a);
            Ta const a01 = matrix_traits<A>::template r<0,1>(a);
            Ta const a10 = matrix_traits<A>::template r<1,0>(a);
            Ta const a11 = matrix_traits<A>::template r<1,1>(a);
            Tb const b00 = matrix_traits<B>::template r<0,0>(b);
            Tb const b01 = matrix_traits<B>::template r<0,1>(b);
            Tb const b10 = matrix_traits<B>::template r<1,0>(b);
            Tb const b11 = matrix_traits<B>::template r<1,1>(b);
            matrix_traits<A>::template w<0,0>(a)=a00*b00+a01*b10;
            matrix_traits<A>::template w<0,1>(a)=a00*b01+a01*b11;
            matrix_traits<A>::template w<1,0>(a)=a10*b00+a11*b10;
            matrix_traits<A>::template w<1,1>(a)=a10*b01+a11*b11;
            return a;
            }

        namespace
        la_detail
            {
            template <int D>
            struct matrix_mul_eq_matrix_defined;

            template <>
            struct
            matrix_mul_eq_matrix_defined<2>
                {
                static bool const value=true;
                };
            }
        }
    }

#endif
